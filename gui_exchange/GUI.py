# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import ctypes
import time
from ctypes import *

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog, QMessageBox


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(531, 374)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout()
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setEnabled(True)
        self.textEdit.setMinimumSize(QtCore.QSize(0, 32))
        self.textEdit.setMaximumSize(QtCore.QSize(16777215, 32))
        self.textEdit.setMouseTracking(True)
        self.textEdit.setAcceptDrops(True)
        self.textEdit.setStyleSheet("QTextEdit{\n"
"border-color:rgba(0, 0, 0, 0);\n"
"background-color:rgba(255, 255, 0, 0);\n"
"\n"
"}")
        self.textEdit.setUndoRedoEnabled(False)
        self.textEdit.setReadOnly(True)
        self.textEdit.setOverwriteMode(False)
        self.textEdit.setAcceptRichText(False)
        self.textEdit.setTextInteractionFlags(QtCore.Qt.NoTextInteraction)
        self.textEdit.setObjectName("textEdit")
        self.verticalLayout_4.addWidget(self.textEdit)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setSpacing(6)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.radioButton = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton.setObjectName("radioButton")
        self.horizontalLayout.addWidget(self.radioButton)
        self.radioButton_7 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_7.setObjectName("radioButton_7")
        self.horizontalLayout.addWidget(self.radioButton_7)
        self.radioButton_3 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_3.setObjectName("radioButton_3")
        self.horizontalLayout.addWidget(self.radioButton_3)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.verticalLayout_4.addLayout(self.verticalLayout)
        self.line_3 = QtWidgets.QFrame(self.centralwidget)
        self.line_3.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.verticalLayout_4.addWidget(self.line_3)
        self.textEdit_4 = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_4.setEnabled(True)
        self.textEdit_4.setMaximumSize(QtCore.QSize(16777215, 32))
        self.textEdit_4.setAcceptDrops(True)
        self.textEdit_4.setStyleSheet("QTextEdit{\n"
"border-color:rgba(0, 0, 0, 0);\n"
"background-color:rgba(255, 255, 0, 0);\n"
"\n"
"}")
        self.textEdit_4.setUndoRedoEnabled(False)
        self.textEdit_4.setReadOnly(True)
        self.textEdit_4.setAcceptRichText(True)
        self.textEdit_4.setTextInteractionFlags(QtCore.Qt.NoTextInteraction)
        self.textEdit_4.setObjectName("textEdit_4")
        self.verticalLayout_4.addWidget(self.textEdit_4)
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.verticalLayout_4.addWidget(self.line)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.checkBox = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox.setMaximumSize(QtCore.QSize(140, 16777215))
        font = QtGui.QFont()
        font.setPointSize(7)
        self.checkBox.setFont(font)
        self.checkBox.setObjectName("checkBox")
        self.horizontalLayout_5.addWidget(self.checkBox)
        self.radioButton_5 = QtWidgets.QCheckBox(self.centralwidget)
        self.radioButton_5.setMaximumSize(QtCore.QSize(140, 40))
        font = QtGui.QFont()
        font.setPointSize(7)
        self.radioButton_5.setFont(font)
        self.radioButton_5.setObjectName("radioButton_5")
        self.horizontalLayout_5.addWidget(self.radioButton_5)
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setMaximumSize(QtCore.QSize(20, 16777215))
        font = QtGui.QFont()
        font.setPointSize(7)
        self.lineEdit.setFont(font)
        self.lineEdit.setObjectName("lineEdit")
        self.horizontalLayout_5.addWidget(self.lineEdit)
        self.radioButton_6 = QtWidgets.QCheckBox(self.centralwidget)
        self.radioButton_6.setMaximumSize(QtCore.QSize(140, 16777215))
        font = QtGui.QFont()
        font.setPointSize(7)
        self.radioButton_6.setFont(font)
        self.radioButton_6.setObjectName("radioButton_6")
        self.horizontalLayout_5.addWidget(self.radioButton_6)
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setMaximumSize(QtCore.QSize(20, 16777215))
        font = QtGui.QFont()
        font.setPointSize(7)
        self.lineEdit_2.setFont(font)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.horizontalLayout_5.addWidget(self.lineEdit_2)
        self.radioButton_2 = QtWidgets.QCheckBox(self.centralwidget)
        self.radioButton_2.setMaximumSize(QtCore.QSize(140, 16777215))
        font = QtGui.QFont()
        font.setPointSize(7)
        self.radioButton_2.setFont(font)
        self.radioButton_2.setObjectName("radioButton_2")
        self.horizontalLayout_5.addWidget(self.radioButton_2)
        self.lineEdit_3 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_3.setMaximumSize(QtCore.QSize(20, 16777215))
        font = QtGui.QFont()
        font.setPointSize(7)
        self.lineEdit_3.setFont(font)
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.horizontalLayout_5.addWidget(self.lineEdit_3)
        self.verticalLayout_4.addLayout(self.horizontalLayout_5)
        self.verticalLayout_5.addLayout(self.verticalLayout_4)
        self.line_2 = QtWidgets.QFrame(self.centralwidget)
        self.line_2.setStyleSheet("background-colcor:rgb(255,255,255);")
        self.line_2.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.verticalLayout_5.addWidget(self.line_2)
        self.verticalLayout_2.addLayout(self.verticalLayout_5)
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.textEdit_2 = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_2.setInputMethodHints(QtCore.Qt.ImhHiddenText)
        self.textEdit_2.setObjectName("textEdit_2")
        self.verticalLayout_3.addWidget(self.textEdit_2)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setObjectName("pushButton_2")
        self.horizontalLayout_2.addWidget(self.pushButton_2)
        self.verticalLayout_3.addLayout(self.horizontalLayout_2)
        self.textEdit_3 = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_3.setReadOnly(True)
        self.textEdit_3.setObjectName("textEdit_3")
        self.verticalLayout_3.addWidget(self.textEdit_3)
        self.verticalLayout_2.addLayout(self.verticalLayout_3)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout_3.addWidget(self.pushButton)
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setObjectName("pushButton_3")
        self.horizontalLayout_3.addWidget(self.pushButton_3)
        self.verticalLayout_2.addLayout(self.horizontalLayout_3)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 531, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        MainWindow.setTabOrder(self.radioButton_3, self.radioButton_7)
        MainWindow.setTabOrder(self.radioButton_7, self.pushButton_2)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.textEdit.setMarkdown(_translate("MainWindow", "功能参数选择：\n"
"\n"
""))
        self.textEdit.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'SimSun\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:6px; margin-bottom:6px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">功能参数选择：</p></body></html>"))
        self.radioButton.setText(_translate("MainWindow", "所有单词链"))
        self.radioButton_7.setText(_translate("MainWindow", "最多字母数"))
        self.radioButton_3.setText(_translate("MainWindow", "最多单词数"))
        self.textEdit_4.setMarkdown(_translate("MainWindow", "附加型参数选择：\n"
"\n"
""))
        self.textEdit_4.setPlaceholderText(_translate("MainWindow", "附加型参数"))
        self.checkBox.setText(_translate("MainWindow", "是否允许单词环"))
        self.radioButton_5.setText(_translate("MainWindow", "禁止的单词首字母"))
        self.radioButton_6.setText(_translate("MainWindow", "指定单词链首字母"))
        self.radioButton_2.setText(_translate("MainWindow", "指定单词链尾字母"))
        self.textEdit_2.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'SimSun\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.textEdit_2.setPlaceholderText(_translate("MainWindow", "输入想要分析的文本..."))
        self.pushButton_2.setText(_translate("MainWindow", "从文件中导入文本"))
        self.pushButton_2.clicked.connect(lambda :self.input_txt())
        self.textEdit_3.setPlaceholderText(_translate("MainWindow", "分析所得长度以及对应单词链..."))
        self.pushButton.setText(_translate("MainWindow", "开始分析"))
        self.pushButton_3.setText(_translate("MainWindow", "导出结果"))
        self.pushButton_3.clicked.connect(lambda :self.saveFile())
        self.pushButton.clicked.connect(lambda :self.input_word())

    def input_word(self):
        cmd = ['Word-Chain.exe']
        if not self.radioButton.isChecked() and not self.radioButton_7.isChecked() and not self.radioButton_3.isChecked():
            box = QMessageBox()
            box.setWindowTitle("错误")
            box.setText("功能性参数缺省！！！")
            box.exec()
            return
        if self.radioButton.isChecked():
            cmd.append(f"-n")
        if self.radioButton_7.isChecked():
            cmd.append("-c")
        if self.radioButton_3.isChecked():
            cmd.append(f"-w")
        if self.checkBox.isChecked():
            cmd.append(f"-r")
        if self.radioButton_6.isChecked():
            cmd.append(f"-h")
            cmd.append(f"{self.lineEdit_2.text()}")
        if self.radioButton_5.isChecked():
            cmd.append(f"-j")
            cmd.append(f"{self.lineEdit.text()}")
        if self.radioButton_2.isChecked():
            cmd.append(f"-t")
            cmd.append(f"{self.lineEdit_3.text()}")

        if len(self.textEdit_2.toPlainText()) == 0:
            box = QMessageBox()
            box.setWindowTitle("错误")
            box.setText("输入不能为空")
            box.exec()
            return
        with open("temp____temp.txt", "w") as f:
            f.write(self.textEdit_2.toPlainText())
        cmd.append("temp____temp.txt")

        dll = cdll.LoadLibrary("./checkCommand")
        dll.checkCommand.restype = ctypes.c_char_p
        char_array = (ctypes.c_char_p * len(cmd))()
        for i in range(len(cmd)):
            char_array[i] = cmd[i].encode('utf-8')
        a = dll.checkCommand(len(cmd), char_array)
        a = a.decode('utf-8')

        if len(a) == 0:
            word = self.dealTxt()
            words = (ctypes.c_char_p * 10000)()
            ans = (ctypes.c_char_p * 10000)()
            for i in range(len(word)):
                words[i] = word[i].encode('utf-8')
            dll = cdll.LoadLibrary("./core")
            #dll = WinDLL("./core_exchanged")        # todo
            starttime = time.time()
            if self.radioButton.isChecked():
                dll.gen_chains_all.restype = ctypes.c_int
                a = dll.gen_chains_all(words, len(word), ans)
                if a == -1:
                    box = QMessageBox()
                    box.setWindowTitle("错误")
                    box.setText("There are rings in the file!")
                    box.exec()
                    return
                elif a == -2:
                    box = QMessageBox()
                    box.setWindowTitle("错误")
                    box.setText("There is no chain in the file!")
                    box.exec()
                    return
                # try:
                #     a = dll.gen_chains_all(words, len(word), ans)
                # except AttributeError as e:
                #     box = QMessageBox()
                #     box.setWindowTitle("错误")
                #     box.setText(str(e))
                #     box.exec()
                #     return
                # except Exception as e:
                #     error_code = ctypes.get_errno()
                #     error_message = ctypes.FormatError(error_code)
                #     box = QMessageBox()
                #     box.setWindowTitle("错误")
                #     box.setText(str(error_message))
                #     box.exec()
                #     return
                string_array = [str(a)]
                for i in range(a):
                    string_array.append(ans[i].decode('utf-8'))
                self.textEdit_3.setText('\n'.join(string_array))
            elif self.radioButton_7.isChecked():
                if self.radioButton_6.isChecked():
                    head = ctypes.c_char(ord(self.lineEdit_2.text()[0]))
                else:
                    head = ctypes.c_char(ord('\000'))
                if self.radioButton_2.isChecked():
                    tail = ctypes.c_char(ord(self.lineEdit_3.text()[0]))
                else:
                    tail = ctypes.c_char(ord('\000'))
                if self.radioButton_5.isChecked():
                    reject = ctypes.c_char(ord(self.lineEdit.text()[0]))
                else:
                    reject = ctypes.c_char(ord('\000'))
                a = dll.gen_chain_char(words, len(word), ans, head, tail, reject,
                                       ctypes.c_bool(self.checkBox.isChecked()))
                if a == -1:
                    box = QMessageBox()
                    box.setWindowTitle("错误")
                    box.setText("There are rings in the file!")
                    box.exec()
                    return
                elif a == -2:
                    box = QMessageBox()
                    box.setWindowTitle("错误")
                    box.setText("There is no chain in the file!")
                    box.exec()
                    return
                # try:
                #     a = dll.gen_chain_char(words, len(word), ans, head, tail, reject, ctypes.c_bool(self.checkBox.isChecked()))
                # except Exception as e:
                #     box = QMessageBox()
                #     box.setWindowTitle("错误")
                #     box.setText(str(e))
                #     box.exec()
                #     return
                string_array = []
                for i in range(a):
                    string_array.append(ans[i].decode('utf-8'))
                self.textEdit_3.setText(' '.join(string_array))
            else:
                if self.radioButton_6.isChecked():
                    head = ctypes.c_char(ord(self.lineEdit_2.text()[0]))
                else:
                    head = ctypes.c_char(ord('\000'))
                if self.radioButton_2.isChecked():
                    tail = ctypes.c_char(ord(self.lineEdit_3.text()[0]))
                else:
                    tail = ctypes.c_char(ord('\000'))
                if self.radioButton_5.isChecked():
                    reject = ctypes.c_char(ord(self.lineEdit.text()[0]))
                else:
                    reject = ctypes.c_char(ord('\000'))
                a = dll.gen_chain_word(words, len(word), ans, head, tail, reject,
                                       ctypes.c_bool(self.checkBox.isChecked()))
                if a == -1:
                    box = QMessageBox()
                    box.setWindowTitle("错误")
                    box.setText("There are rings in the file!")
                    box.exec()
                    return
                elif a == -2:
                    box = QMessageBox()
                    box.setWindowTitle("错误")
                    box.setText("There is no chain in the file!")
                    box.exec()
                    return
                # try:
                #     a = dll.gen_chain_word(words, len(word), ans, head, tail, reject, ctypes.c_bool(self.checkBox.isChecked()))
                # except Exception as e:
                #     box = QMessageBox()
                #     box.setWindowTitle("错误")
                #     box.setText(str(e))
                #     box.exec()
                #     return
            #char_array_p = (ctypes.c_char_p * len(ans))(*[ctypes.c_char_p(str_.encode('utf-8')) for str_ in ans])
                string_array = []
                for i in range(a):
                    string_array.append(ans[i].decode('utf-8'))
                self.textEdit_3.setText(' '.join(string_array))

            # 时间提示
            endtime = time.time()
            box = QMessageBox()
            box.setWindowTitle("正确运行")
            elapsed_time = endtime - starttime
            box.setText(f"本次运算运行时间为：{elapsed_time:.2f}秒")
            box.exec()
        else:
            box = QMessageBox()
            box.setWindowTitle("错误")
            box.setText(a)
            box.exec()


    def input_txt(self):
        directory1 = QtWidgets.QFileDialog.getOpenFileName(None,
                                                      "选取文件夹",
                                                      "./")  # 起始路径
        import os
        filename = directory1[0]
        if os.path.exists(filename):
            try:
                with open(filename, 'r') as file:
                    # 在此处对文件进行操作，例如读取文件内容
                    content = file.read()
                    self.textEdit_2.setText(content)
            except IOError:
                box = QMessageBox()
                box.setWindowTitle("错误")
                box.setText(f"无法打开{filename}")
                box.exec()
        else:
            box = QMessageBox()
            box.setWindowTitle("错误")
            box.setText(f"{filename}不存在")
            box.exec()

    def saveFile(self):
        filename, ok2 = QFileDialog.getSaveFileName(None,
                                                     "文件保存",
                                                     "./",
                                                     "All Files (*);;Text Files (*.txt)")
        import os
        try:
            with open(filename, "w") as f:
                f.write(self.textEdit_3.toPlainText())
                box = QMessageBox()
                box.setWindowTitle("写入成功")
                box.setText(f"The file {filename} was written successfully.")
                box.exec()
        except:
            box = QMessageBox()
            box.setWindowTitle("错误")
            box.setText(f"Failed to write to the file {filename}.")
            box.exec()

    def dealTxt(self):
        text = self.textEdit_2.toPlainText()
        words = text.split()
        for i in range(len(words)):
            if words[i].isalpha():
                words[i] = words[i].lower()
            else:
                words[i] = ''.join(c.lower() for c in words[i] if c.isalpha())
        return words

